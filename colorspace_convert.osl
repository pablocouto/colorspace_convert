// Copyright (c) 2023 Pablo Couto <hello@pablo.nohyphen.org>

// File partially generated with cog. Execute `cog -r colorspace_convert.osl`
// to update it.

/*[[[cog
from colour import RGB_COLOURSPACES
import util.codegen as codegen

# From: https://colour.readthedocs.io/en/latest/generated/colour.RGB_COLOURSPACES.html
colorspaces = [RGB_COLOURSPACES[cs] for cs in [
    'ACES2065-1',
    'ACEScg',
    'ITU-R BT.709',
    'Sharp RGB',
    ]]
CAT = 'CAT16'
]]]*/
//[[[end]]]

shader colorspace_convert
(
    color Cin = 0,

    int ics = 0 [[
        string label = "Input Colorspace",
        string widget = "mapper",
        /*[[[cog
        cog.outl(codegen.generate_options(colorspaces))
        ]]]*/
        string options = "ACES2065-1 (ACES):0|ACEScg (ACES):1|ITU-R BT.709 (D65):2|Sharp RGB (E):3"
        //[[[end]]]
    ]],

    int ocs = 0 [[
        string label = "Output Colorspace",
        string widget = "mapper",
        /*[[[cog
        cog.outl(codegen.generate_options(colorspaces))
        ]]]*/
        string options = "ACES2065-1 (ACES):0|ACEScg (ACES):1|ITU-R BT.709 (D65):2|Sharp RGB (E):3"
        //[[[end]]]
    ]],

    output color Cout = 0
)
{
    matrix m, m_i, m_o, cat_i, cat_o;

    /*[[[cog
    cog.out(codegen.generate_transforms(colorspaces, cat=CAT))
    ]]]*/
    if (ics == 0)	// ACES2065-1, w: ACES
    {
        m_i = matrix(
    		 0.9525523959,  0.0000000000,  0.0000936786,  0.0000000000,
    		 0.3439664498,  0.7281660966, -0.0721325464,  0.0000000000,
    		 0.0000000000,  0.0000000000,  1.0088251844,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_i = matrix(
    		 1.0117654445,  0.0387078805, -0.0025398450,  0.0000000000,
    		 0.0049686432,  0.9959410943, -0.0006685526,  0.0000000000,
    		-0.0002111174, -0.0001404846,  0.9915906346,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    else if (ics == 1)	// ACEScg, w: ACES
    {
        m_i = matrix(
    		 0.6624541811,  0.1340042065,  0.1561876870,  0.0000000000,
    		 0.2722287168,  0.6740817658,  0.0536895174,  0.0000000000,
    		-0.0055746495,  0.0040607335,  1.0103391003,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_i = matrix(
    		 1.0117654445,  0.0387078805, -0.0025398450,  0.0000000000,
    		 0.0049686432,  0.9959410943, -0.0006685526,  0.0000000000,
    		-0.0002111174, -0.0001404846,  0.9915906346,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    else if (ics == 2)	// ITU-R BT.709, w: D65
    {
        m_i = matrix(
    		 0.4123907993,  0.3575843394,  0.1804807884,  0.0000000000,
    		 0.2126390059,  0.7151686788,  0.0721923154,  0.0000000000,
    		 0.0193308187,  0.1191947798,  0.9505321522,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_i = matrix(
    		 1.0146592493,  0.0495391869, -0.0127891145,  0.0000000000,
    		 0.0064204032,  0.9942159319, -0.0002922179,  0.0000000000,
    		-0.0001269171, -0.0036178264,  0.9216576943,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    else if (ics == 3)	// Sharp RGB, w: E
    {
        m_i = matrix(
    		 0.8156225976,  0.0471626016,  0.1372148008,  0.0000000000,
    		 0.3790788704,  0.5769088350,  0.0440122946,  0.0000000000,
    		-0.0122970064,  0.0167247813,  0.9955722251,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_i = matrix(
    		 1.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,
    		 0.0000000000,  1.0000000000,  0.0000000000,  0.0000000000,
    		 0.0000000000,  0.0000000000,  1.0000000000,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    //[[[end]]]

    /*[[[cog
    cog.out(codegen.generate_transforms(colorspaces, output=True, cat=CAT))
    ]]]*/
    if (ocs == 0)	// ACES2065-1, w: ACES
    {
        m_o = matrix(
    		 1.0498110175,  0.0000000000, -0.0000974845,  0.0000000000,
    		-0.4959030231,  1.3733130458,  0.0982400361,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.9912520182,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_o = matrix(
    		 0.9885605732, -0.0384206784,  0.0025061798,  0.0000000000,
    		-0.0049316818,  1.0042672142,  0.0006644675,  0.0000000000,
    		 0.0002097736,  0.0001341005,  1.0084813102,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    else if (ocs == 1)	// ACEScg, w: ACES
    {
        m_o = matrix(
    		 1.6410233797, -0.3248032942, -0.2364246952,  0.0000000000,
    		-0.6636628587,  1.6153315917,  0.0167563477,  0.0000000000,
    		 0.0117218943, -0.0082844420,  0.9883948585,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_o = matrix(
    		 0.9885605732, -0.0384206784,  0.0025061798,  0.0000000000,
    		-0.0049316818,  1.0042672142,  0.0006644675,  0.0000000000,
    		 0.0002097736,  0.0001341005,  1.0084813102,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    else if (ocs == 2)	// ITU-R BT.709, w: D65
    {
        m_o = matrix(
    		 3.2409699419, -1.5373831776, -0.4986107603,  0.0000000000,
    		-0.9692436363,  1.8759675015,  0.0415550574,  0.0000000000,
    		 0.0556300797, -0.2039769589,  1.0569715142,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_o = matrix(
    		 0.9858647676, -0.0490733468,  0.0136645063,  0.0000000000,
    		-0.0063664408,  1.0061357807,  0.0002306601,  0.0000000000,
    		 0.0001107683,  0.0039426745,  1.0850043080,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    else if (ocs == 3)	// Sharp RGB, w: E
    {
        m_o = matrix(
    		 1.2694188828, -0.0988302413, -0.1705886415,  0.0000000000,
    		-0.8363858117,  1.8007170555,  0.0356687562,  0.0000000000,
    		 0.0297300599, -0.0314712627,  1.0017412028,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
        cat_o = matrix(
    		 1.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,
    		 0.0000000000,  1.0000000000,  0.0000000000,  0.0000000000,
    		 0.0000000000,  0.0000000000,  1.0000000000,  0.0000000000,
    		 0.0000000000,  0.0000000000,  0.0000000000,  1.0000000000);
    }
    //[[[end]]]

    m = m_i * cat_i * cat_o * m_o;
    Cout = transform(transpose(m), (vector) Cin);
}
